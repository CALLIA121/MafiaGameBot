import json
import random
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import db
from config import fprint, MAX_PLAYERS

# ------------------------ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ -----------------------
API_TOKEN = '7547376848:AAHa9ThwqibdqRiJoUj6oda6SxxEkwxoPcM'
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

db.connectTo('bot.db')


# ------------------------ –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ --------------------


class Registration(StatesGroup):
    nickname = State()


# ------------------------ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —É—Ç–∏–ª–∏—Ç—ã -----------------------
PHASE_TIMEOUTS = {'night': 60, 'day': 120}
ROLES = {
    1: {'title': '–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å', 'emoji': 'üë®üåæ', 'color': '#27ae60',
        'about': '–í–∞—à–∞ —Ü–µ–ª—å - –≤—ã–∂–∏—Ç—å –∏ –≤—ã—è–≤–∏—Ç—å –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ –º–∞—Ñ–∏–∏ –ø—É—Ç–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.'},
    2: {'title': '–ú–∞—Ñ–∏—è', 'emoji': 'üî´', 'color': '#c0392b',
        'about': '–ù–æ—á—å—é –≤—ã —É—Å—Ç—Ä–∞–Ω—è–µ—Ç–µ –º–∏—Ä–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π, –¥–Ω–µ–º —Å—Ç–∞—Ä–∞–µ—Ç–µ—Å—å –Ω–µ –ø–æ–ø–∞—Å—Ç—å—Å—è.'},
    3: {'title': '–î–æ–∫—Ç–æ—Ä', 'emoji': 'ü©∫', 'color': '#2980b9',
        'about': '–ö–∞–∂–¥—É—é –Ω–æ—á—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ª–µ—á–µ–Ω–∏—è.'},
    4: {'title': '–ö–æ–º–∏—Å—Å–∞—Ä', 'emoji': 'üïµÔ∏è', 'color': '#8e44ad',
        'about': '–ù–æ—á—å—é –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–æ–ª—å –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞.'}
}


async def send_to_group(chat_id, text):
    await bot.send_message(chat_id, f"üëÆ –í–µ–¥—É—â–∏–π: {text}")


async def get_game_data(chat_id):
    data = db.getData(3, 'Night, AtNight, MessageID', f"!ChatID = {chat_id}")
    return {
        'night': data[0][0],
        'actions': json.loads(data[0][1]) if data[0][1] else {'killed': -1, 'healed': -1},
        'message_id': data[0][2]
    }


async def update_game_data(chat_id, data):
    db.writeData(3, 'AtNight', json.dumps(data), f"!ChatID = {chat_id}")


# ------------------------ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ------------------------


@dp.message_handler(commands=['start'], chat_type=types.ChatType.PRIVATE)
async def cmd_start_private(message: types.Message):
    user_id = message.from_user.id
    if db.getData(1, 'ID', user_id):
        await message.answer("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return

    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º (3-20 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã):")
    await Registration.nickname.set()


@dp.message_handler(commands=['start'], chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
async def cmd_start_group(message: types.Message):
    user_id = message.from_user.id
    if not db.getData(1, 'ID', user_id):
        await message.reply(
            "‚ö†Ô∏è –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∏–≥—Ä–µ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º –∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start")


@dp.message_handler(state=Registration.nickname)
async def process_nickname(message: types.Message, state: FSMContext):
    nickname = message.text.strip()

    if not (3 <= len(nickname) <= 20):
        await message.answer("‚ùå –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤!")
        return

    if not nickname.isalnum():
        await message.answer("‚ùå –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã!")
        return

    if db.getData(1, 'ID', f"!Nickname = '{nickname}'"):
        await message.answer("‚ùå –≠—Ç–æ—Ç –Ω–∏–∫–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç!")
        return

    user_id = message.from_user.id
    db.writeData(1, 'ID, Nickname, inGame, Alive, role',
                 (user_id, nickname, -1, 0, -1), qvest=None)

    await message.answer(f"üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, {nickname}!\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–∞—Ö!")
    await state.finish()


@dp.message_handler(commands=['startgame'])
async def cmd_start_game(message: types.Message):
    chat_id = message.chat.id

    if db.getData(3, 'ChatID', f"!ChatID = {chat_id}"):
        await send_to_group(chat_id, "‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞!")
        return

    creator_id = message.from_user.id
    if not db.getData(1, 'ID', creator_id):
        await message.reply("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start –≤ –õ–°!")
        return

    db.writeData(3, 'ChatID, Night, AtNight, MessageID',
                 (chat_id, 1, '{"killed":-1,"healed":-1}', -1))

    db.writeData(1, 'inGame, Alive, role', (chat_id, 1, -1), creator_id)

    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton("üéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è",
                             callback_data=f"join_{chat_id}"),
        InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data=f"start_{chat_id}")
    )

    players = db.getData(1, 'Nickname', f"!inGame = {chat_id} AND Alive = 1")
    players_list = "\n".join([f"üëâ {name}" for name in players])

    msg = await bot.send_message(
        chat_id,
        f"üéâ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É –≤ –ú–∞—Ñ–∏—é!\n"
        f"üë• –ò–≥—Ä–æ–∫–æ–≤: {len(players)}/{MAX_PLAYERS}\n"
        f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        f"–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{players_list}",
        reply_markup=markup
    )

    db.writeData(3, 'MessageID', msg.message_id, f"!ChatID = {chat_id}")


# ------------------------ Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ----------------------


@dp.callback_query_handler(lambda c: c.data.startswith('join_'))
async def process_join(callback: CallbackQuery):
    chat_id = int(callback.data.split('_')[1])
    user_id = callback.from_user.id

    if db.getData(1, 'ID', user_id) == []:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start –≤ –õ–°!")
        return

    current_players = db.getData(1, 'ID', f"!inGame = {chat_id} AND Alive = 1")
    if len(current_players) >= MAX_PLAYERS:
        await callback.answer("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤!")
        return

    current_game = db.getData(1, 'inGame', user_id)
    if current_game != [-1] and current_game != [chat_id]:
        await callback.answer("‚ùå –í—ã —É–∂–µ –≤ –¥—Ä—É–≥–æ–π –∏–≥—Ä–µ!")
        return

    db.writeData(1, 'inGame, Alive, role',
                 (chat_id, 1, -1), user_id)

    await callback.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å!")
    await update_game_lobby(chat_id)


async def update_game_lobby(chat_id):
    players = db.getData(1, 'Nickname', f"!inGame = {chat_id} AND Alive = 1")
    players_list = "\n".join([f"üëâ {name}" for name in players])
    msg = db.getData(3, 'MessageID', f"!ChatID = {chat_id}")[0]

    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton("üéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è",
                             callback_data=f"join_{chat_id}"),
        InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data=f"start_{chat_id}")
    )

    await bot.edit_message_text(
        text=f"üéâ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É –≤ –ú–∞—Ñ–∏—é!\n"
             f"üë• –ò–≥—Ä–æ–∫–æ–≤: {len(players)}/{MAX_PLAYERS}\n"
             f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
             f"–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{players_list}",
        reply_markup=markup,
        chat_id=chat_id,
        message_id=msg
    )


@dp.callback_query_handler(lambda c: c.data.startswith('start_'))
async def process_start(callback: CallbackQuery):
    chat_id = int(callback.data.split('_')[1])
    user_id = callback.from_user.id

    creator = db.getData(3, 'CreatorID', f"ChatID = chat_id")[0]
    if user_id != creator:
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–≥—Ä—ã –º–æ–∂–µ—Ç –µ—ë –Ω–∞—á–∞—Ç—å!")
        return

    players = db.getData(1, 'ID', f"!inGame = {chat_id} AND Alive = 1")
    if len(players) < 4:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ (–º–∏–Ω–∏–º—É–º 4)!")
        return

    game_data = await get_game_data(chat_id)
    try:
        await bot.edit_message_reply_markup(
            chat_id=chat_id,
            message_id=game_data['message_id'],
            reply_markup=None
        )
    except:
        pass

    await start_game_logic(chat_id)


# ------------------------ –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ ----------------------------


async def start_game_logic(chat_id):
    players = db.getData(1, 'ID', f"!inGame = {chat_id} AND Alive = 1")

    roles = [2] + [3, 4] + [1] * (len(players) - 3)
    random.shuffle(roles)

    for i, player_id in enumerate(players):
        role_id = roles[i]
        db.writeData(1, 'role', role_id, f"!ID = {player_id}")
        try:
            role_info = ROLES[role_id]
            await bot.send_message(
                player_id,
                f"üé≠ –í–∞—à–∞ —Ä–æ–ª—å: {role_info['emoji']} {role_info['title']}\n"
                f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                f"{db.getData(2, 'About', role_id)[0]}"
            )
            if role_id == 2:
                await send_mafia_actions(player_id, chat_id)
            elif role_id == 3:
                await send_doctor_actions(player_id, chat_id)
        except Exception as e:
            fprint(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–æ–ª–∏: {e}")

    await send_to_group(chat_id, "üåô –ù–æ—á—å –Ω–∞—Å—Ç—É–ø–∞–µ—Ç! –£ –∏–≥—Ä–æ–∫–æ–≤ –µ—Å—Ç—å 2 –º–∏–Ω—É—Ç—ã –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è!")
    await night_phase(chat_id)


async def send_mafia_actions(user_id, chat_id):
    players = db.getData(
        1, 'ID', f"!inGame = {chat_id} AND Alive = 1 AND role != 2")
    markup = InlineKeyboardMarkup()
    for player in players:
        markup.add(InlineKeyboardButton(
            f"üë§ {db.getData(1, 'Nickname', player)[0]}",
            callback_data=f"kill_{player}"
        ))
    await bot.send_message(user_id, "üî´ –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ—Ä—Ç–≤—É:", reply_markup=markup)


async def send_doctor_actions(user_id, chat_id):
    players = db.getData(1, 'ID', f"!inGame = {chat_id} AND Alive = 1")
    markup = InlineKeyboardMarkup()
    for player in players:
        markup.add(InlineKeyboardButton(
            f"üë§ {db.getData(1, 'Nickname', player)[0]}",
            callback_data=f"heal_{player}"
        ))
    await bot.send_message(user_id, "ü©∫ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≥–æ –≤—ã–ª–µ—á–∏—Ç—å:", reply_markup=markup)


async def night_phase(chat_id):
    db.writeData(3, 'Night', (await get_game_data(chat_id))['night'] + 1, f"!ChatID = {chat_id}")
    await asyncio.sleep(PHASE_TIMEOUTS['night'])

    game_data = await get_game_data(chat_id)
    killed = game_data['actions']['killed']
    healed = game_data['actions']['healed']

    if healed != killed and killed != -1:
        db.writeData(1, 'Alive', 0, f"!ID = {killed}")
        await send_to_group(chat_id,
                            f"‚òÄÔ∏è –£—Ç—Ä–æ! –ë—ã–ª–æ —Å–æ–≤–µ—Ä—à–µ–Ω–æ —É–±–∏–π—Å—Ç–≤–æ! –ñ–µ—Ä—Ç–≤–∞: {db.getData(1, 'Nickname', killed)[0]}")
    else:
        await send_to_group(chat_id, "‚òÄÔ∏è –£—Ç—Ä–æ! –ü—Ä–æ—à–ª–∞ —Å–ø–æ–∫–æ–π–Ω–∞—è –Ω–æ—á—å –±–µ–∑ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏–π!")

    await day_phase(chat_id)


async def day_phase(chat_id):
    alive_players = db.getData(1, 'ID', f"!inGame = {chat_id} AND Alive = 1")
    markup = InlineKeyboardMarkup()
    for player in alive_players:
        markup.add(InlineKeyboardButton(
            f"üë§ {db.getData(1, 'Nickname', player)[0]}",
            callback_data=f"vote_{player}"
        ))

    await send_to_group(chat_id, "üó≥Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –¥–Ω–µ–≤–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ! –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è:",
                        reply_markup=markup)
    await asyncio.sleep(PHASE_TIMEOUTS['day'])

    votes = {}
    messages = await bot.get_chat(chat_id).get_messages()
    for msg in messages:
        if msg.reply_markup:
            for btn in msg.reply_markup.inline_keyboard:
                if btn[0].callback_data.startswith('vote_'):
                    user_id = int(btn[0].callback_data.split('_')[1])
                    votes[user_id] = votes.get(user_id, 0) + 1

    if votes:
        excluded = max(votes, key=votes.get)
        db.writeData(1, 'Alive', 0, f"!ID = {excluded}")
        await send_to_group(chat_id, f"‚öñÔ∏è –ò–≥—Ä–æ–∫ {db.getData(1, 'Nickname', excluded)[0]} –∏—Å–∫–ª—é—á–µ–Ω!")
    else:
        await send_to_group(chat_id, "üîÑ –ù–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –≥–æ–ª–æ—Å–æ–≤")

    await check_win_condition(chat_id)


@dp.callback_query_handler(lambda c: c.data.startswith('kill_'))
async def process_kill(callback: CallbackQuery):
    victim_id = int(callback.data.split('_')[1])
    chat_id = db.getData(1, 'inGame', callback.from_user.id)[0]

    game_data = await get_game_data(chat_id)
    game_data['actions']['killed'] = victim_id
    await update_game_data(chat_id, game_data)
    await callback.answer("‚úÖ –ñ–µ—Ä—Ç–≤–∞ –≤—ã–±—Ä–∞–Ω–∞!")


@dp.callback_query_handler(lambda c: c.data.startswith('heal_'))
async def process_heal(callback: CallbackQuery):
    patient_id = int(callback.data.split('_')[1])
    chat_id = db.getData(1, 'inGame', callback.from_user.id)[0]

    game_data = await get_game_data(chat_id)
    game_data['actions']['healed'] = patient_id
    await update_game_data(chat_id, game_data)
    await callback.answer("‚úÖ –ü–∞—Ü–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–Ω!")


async def check_win_condition(chat_id):
    mafia = db.getData(
        1, 'ID', f"!inGame = {chat_id} AND Alive = 1 AND role = 2")
    civilians = db.getData(
        1, 'ID', f"!inGame = {chat_id} AND Alive = 1 AND role != 2")

    if len(mafia) == 0:
        await send_to_group(chat_id, "üéâ –ú–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ –ø–æ–±–µ–¥–∏–ª–∏!")
        await end_game(chat_id)
    elif len(mafia) >= len(civilians):
        await send_to_group(chat_id, "üéâ –ú–∞—Ñ–∏—è –ø–æ–±–µ–¥–∏–ª–∞!")
        await end_game(chat_id)
    else:
        await night_phase(chat_id)


async def end_game(chat_id):
    db.writeData(3, 'Night, AtNight',
                 (1, '{"killed":-1,"healed":-1}'), f"!ChatID = {chat_id}")
    db.writeData(1, 'inGame, Alive, role', (-1, 0, -1), f"!inGame = {chat_id}")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
