import json
import random
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import db
import aiogram.utils.exceptions as aigramExceptions
from config import fprint, MAX_PLAYERS, TOKEN

# ------------------------ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ -----------------------
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

db.connectTo('bot.db')

# ------------------------ –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ --------------------


class Registration(StatesGroup):
    nickname = State()


# ------------------------ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —É—Ç–∏–ª–∏—Ç—ã -----------------------
PHASE_TIMEOUTS = {'night': 60, 'day': 60}
ROLES = {
    1: {'title': '–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å', 'emoji': 'üë®üåæ', 'color': '#27ae60', 'about': '–í–∞—à–∞ —Ü–µ–ª—å - –≤—ã–∂–∏—Ç—å –∏ –≤—ã—è–≤–∏—Ç—å –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ –º–∞—Ñ–∏–∏ –ø—É—Ç–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.'},
    2: {'title': '–ú–∞—Ñ–∏—è', 'emoji': 'üî´', 'color': '#c0392b', 'about': '–ù–æ—á—å—é –≤—ã —É—Å—Ç—Ä–∞–Ω—è–µ—Ç–µ –º–∏—Ä–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π, –¥–Ω–µ–º —Å—Ç–∞—Ä–∞–µ—Ç–µ—Å—å –Ω–µ –ø–æ–ø–∞—Å—Ç—å—Å—è.'},
    3: {'title': '–î–æ–∫—Ç–æ—Ä', 'emoji': 'ü©∫', 'color': '#2980b9', 'about': '–ö–∞–∂–¥—É—é –Ω–æ—á—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ª–µ—á–µ–Ω–∏—è.'},
    4: {'title': '–ö–æ–º–∏—Å—Å–∞—Ä', 'emoji': 'üïµÔ∏è', 'color': '#8e44ad', 'about': '–ù–æ—á—å—é –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–æ–ª—å –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞.'}
}


async def send_to_group(chat_id, text, reply_markup=None):
    await bot.send_message(chat_id, f"üëÆ –í–µ–¥—É—â–∏–π: {text}", reply_markup=reply_markup)


async def get_game_data(chat_id):
    data = db.getData(3, ('Night', 'AtNight', 'MessageID'),
                      f"!ChatID = {chat_id}", All=True)
    return {
        'night': data[0][0],
        'actions': json.loads(data[0][1]) if data[0][1] else {'killed': -1, 'healed': -1},
        'message_id': data[0][2]
    }


async def update_game_data(chat_id, data):
    db.writeData(3, 'AtNight', (json.dumps(data)), f"!ChatID = {chat_id}")

# ------------------------ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ------------------------


@dp.message_handler(commands=['start'], chat_type=types.ChatType.PRIVATE)
async def cmd_start_private(message: types.Message):
    user_id = message.from_user.id
    if db.getData(1, 'ID', user_id, All=True):
        await message.answer("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return

    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º (3-20 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã):")
    await Registration.nickname.set()


@dp.message_handler(commands=['start'], chat_type=[types.ChatType.GROUP, types.ChatType.SUPERGROUP])
async def cmd_start_group(message: types.Message):
    user_id = message.from_user.id
    if not db.getData(1, 'ID', user_id, All=True):
        await message.reply("‚ö†Ô∏è –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∏–≥—Ä–µ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º –∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start")


@dp.message_handler(state=Registration.nickname)
async def process_nickname(message: types.Message, state: FSMContext):
    nickname = message.text.strip()

    if not (3 <= len(nickname) <= 20):
        await message.answer("‚ùå –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤!")
        return

    if not nickname.isalnum():
        await message.answer("‚ùå –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã!")
        return

    if db.getData(1, 'ID', f"!Nickname = '{nickname}'", All=True):
        await message.answer("‚ùå –≠—Ç–æ—Ç –Ω–∏–∫–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç!")
        return

    user_id = message.from_user.id
    db.writeData(1, ('ID', 'Nickname', 'inGame', 'Alive', 'role'),
                 (user_id, nickname, -1, 0, -1), qvest=None)

    await message.answer(f"üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, {nickname}!\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–∞—Ö!")
    await state.finish()


@dp.message_handler(commands=['startgame'])
async def cmd_start_game(message: types.Message):
    chat_id = message.chat.id

    if db.getData(3, 'ChatID', f"!ChatID = {chat_id}", All=True) != []:
        await send_to_group(chat_id, "‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞!\n–ï—ë –º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /endgame")
        return

    creator_id = message.from_user.id
    if not db.getData(1, 'ID', creator_id, All=True):
        await message.reply("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start –≤ –õ–°!")
        return

    db.writeData(3, ('ChatID', 'Night', 'AtNight', 'MessageID', 'CreatorID'),
                 (chat_id, 1, '{"killed":-1,"healed":-1}', -1, creator_id))

    db.writeData(1, ('inGame', 'Alive', 'role'), (chat_id, 1, -1), creator_id)

    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton("üéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è",
                             callback_data=f"join_{chat_id}"),
        InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data=f"start_{chat_id}")
    )

    players = db.getData(
        1, 'Nickname', f"!inGame = {chat_id} AND Alive = 1", All=True)
    players_list = "\n".join(
        [f"üëâ {name}" for name in players]) if players else ""

    msg = await bot.send_message(
        chat_id,
        f"üéâ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É –≤ –ú–∞—Ñ–∏—é!\n"
        f"üë• –ò–≥—Ä–æ–∫–æ–≤: {len(players)}/{MAX_PLAYERS}\n"
        f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        f"–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{players_list}",
        reply_markup=markup
    )

    db.writeData(3, 'MessageID', msg.message_id, f"!ChatID = {chat_id}")


@dp.message_handler(commands=['endgame'])
async def cmd_end_game(message: types.Message):
    chat_id = message.chat.id
    msg_id = db.getData(3, 'MessageID', f"!ChatID = {chat_id}")

    if not msg_id:
        await send_to_group(chat_id, "‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –∏–≥—Ä–∞!\n–ï—ë –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑—É—è /startgame")
        return

    try:
        await bot.delete_message(chat_id, msg_id)
    except Exception as e:
        pass

    await end_game(chat_id)

# ------------------------ Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ----------------------


@dp.callback_query_handler(lambda c: c.data.startswith('join_'))
async def process_join(callback: CallbackQuery):
    chat_id = int(callback.data.split('_')[1])
    user_id = callback.from_user.id

    if not db.getData(1, 'ID', user_id, All=True):
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start –≤ –õ–°!", show_alert=True)
        return

    players = db.getData(
        1, 'Nickname', f"!inGame = {chat_id} AND Alive = 1", All=True)
    if len(players) >= MAX_PLAYERS:
        await callback.answer("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤!")
        return

    current_game = db.getData(1, 'inGame', user_id, All=True)
    if current_game and current_game[0] not in [-1, chat_id]:
        await callback.answer("‚ùå –í—ã —É–∂–µ –≤ –¥—Ä—É–≥–æ–π –∏–≥—Ä–µ!")
        return

    db.writeData(1, ('inGame', 'Alive', 'role', 'Checked'),
                 (chat_id, 1, -1, 0), user_id)
    await callback.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å!")
    players = db.getData(
        1, 'Nickname', f"!inGame = {chat_id} AND Alive = 1", All=True)
    players_list = "\n".join(
        [f"üëâ {name}" for name in players]) if players else ""

    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton("üéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è",
                             callback_data=f"join_{chat_id}"),
        InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data=f"start_{chat_id}")
    )

    await callback.message.edit_text(
        text=f"üéâ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É –≤ –ú–∞—Ñ–∏—é!\n"
        f"üë• –ò–≥—Ä–æ–∫–æ–≤: {len(players)}/{MAX_PLAYERS}\n"
        f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        f"–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{players_list}",
        reply_markup=markup,
    )


@dp.callback_query_handler(lambda c: c.data.startswith('start_'))
async def process_start(callback: CallbackQuery):
    chat_id = int(callback.data.split('_')[1])
    user_id = callback.from_user.id

    creator = db.getData(
        3, 'CreatorID', f"!ChatID = {chat_id}")
    if user_id != creator:
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–≥—Ä—ã –º–æ–∂–µ—Ç –µ—ë –Ω–∞—á–∞—Ç—å!")
        return

    players = db.getData(
        1, 'ID', f"!inGame = {chat_id} AND Alive = 1", All=True)
    if len(players) < 4:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ (–º–∏–Ω–∏–º—É–º 4)!")
        return

    game_data = await get_game_data(chat_id)
    try:
        await bot.edit_message_reply_markup(
            chat_id=chat_id,
            message_id=game_data['message_id'],
            reply_markup=None
        )
    except Exception as e:
        fprint(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    await start_game_logic(chat_id)

# ------------------------ –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ ----------------------------


async def start_game_logic(chat_id):
    players = db.getData(
        1, 'ID', f"!inGame = {chat_id} AND Alive = 1", All=True)
    players = [p for p in players]

    roles = [2, 3, 4] + [1]*(len(players)-3)
    random.shuffle(roles)
    random.shuffle(players)

    for i in range(len(players)):
        role_id = roles[i]
        player_id = players[i]
        db.writeData(1, 'role', (role_id), f"!ID = {player_id}")
        try:
            role_info = ROLES[role_id]
            await bot.send_message(
                player_id,
                f"üé≠ –í–∞—à–∞ —Ä–æ–ª—å: {role_info['emoji']} {role_info['title']}\n"
                f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                f"{role_info['about']}"
            )
        except Exception as e:
            fprint(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–æ–ª–∏: {e}")

    await night_phase(chat_id)


async def send_mafia_actions(user_id, chat_id):
    players = db.getData(1, ('ID', 'Nickname'),
                         f"!inGame = {chat_id} AND Alive = 1 AND role != 2",
                         All=True)
    markup = InlineKeyboardMarkup()
    for player_id, nickname in players:
        markup.add(InlineKeyboardButton(
            f"üë§ {nickname}",
            callback_data=f"kill_{player_id}"
        ))
    await bot.send_message(user_id, "üî´ –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ—Ä—Ç–≤—É:", reply_markup=markup)


async def send_doctor_actions(user_id, chat_id):
    players = db.getData(1, ('ID', 'Nickname'),
                         f"!inGame = {chat_id} AND Alive = 1",
                         All=True)
    markup = InlineKeyboardMarkup()
    for player_id, nickname in players:
        markup.add(InlineKeyboardButton(
            f"üë§ {nickname}",
            callback_data=f"heal_{player_id}"
        ))
    await bot.send_message(user_id, "ü©∫ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≥–æ –≤—ã–ª–µ—á–∏—Ç—å:", reply_markup=markup)


async def send_sherif_actions(user_id, chat_id):
    players = db.getData(1, ('ID', 'Nickname', 'role', 'Checked'),
                         f"!inGame = {chat_id} AND Alive = 1 AND Role != 4",
                         All=True)
    markup = InlineKeyboardMarkup()
    ch = {
        1: 'üë§',
        2: 'üî´',
        3: 'ü©∫',
        0: 'üò∂‚Äçüå´Ô∏è'
    }
    for player_id, nickname, role, checked in players:
        emoji = ch[0] if not checked else ch.get(role, '‚ùì')
        markup.add(InlineKeyboardButton(
            f"{emoji} {nickname}",
            callback_data=f"check_{player_id}"
        ))
    await bot.send_message(user_id,
                           "üîç –í—ã–±–µ—Ä–∏—Ç–µ, —á—å—é —Ä–æ–ª—å —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å:\n"
                           "üò∂‚Äçüå´Ô∏è - –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π\n"
                           "üî´ - –º–∞—Ñ–∏—è\n"
                           "ü©∫ - –¥–æ–∫—Ç–æ—Ä\n"
                           "üë§ - –º–∏—Ä–Ω—ã–π",
                           reply_markup=markup)


async def night_phase(chat_id):
    await send_to_group(chat_id, "üåô –ù–æ—á—å –Ω–∞—Å—Ç—É–ø–∞–µ—Ç! –£ –∏–≥—Ä–æ–∫–æ–≤ –µ—Å—Ç—å 2 –º–∏–Ω—É—Ç—ã –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è!")
    mafia = db.getData(1, 'ID',
                       f"!inGame = {chat_id} AND Alive = 1 AND role = 2")
    if mafia:
        await send_mafia_actions(mafia, chat_id)

    doctor = db.getData(1, 'ID',
                        f"!inGame = {chat_id} AND Alive = 1 AND role = 3")

    if doctor:
        await send_doctor_actions(doctor, chat_id)

    sherifs = db.getData(1, 'ID',
                         f"!inGame = {chat_id} AND Alive = 1 AND role = 4")
    if sherifs:
        await send_sherif_actions(sherifs, chat_id)

    fprint('------------------------------------------- –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞', type='T1 C5')
    await asyncio.sleep(PHASE_TIMEOUTS['night'])
    fprint('------------------------------------------- –û–∫–æ–Ω—á–∞–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞', type='T1 C5')

    game_data = await get_game_data(chat_id)
    killed = game_data['actions']['killed']
    healed = game_data['actions']['healed']

    if killed != -1 and killed != healed:
        db.writeData(1, 'Alive', (0), f"!ID = {killed}")
        await send_to_group(chat_id, f"‚òÄÔ∏è –£—Ç—Ä–æ! –ë—ã–ª–æ —Å–æ–≤–µ—Ä—à–µ–Ω–æ —É–±–∏–π—Å—Ç–≤–æ! –ñ–µ—Ä—Ç–≤–∞: {db.getData(1, 'Nickname', killed)}")
    else:
        await send_to_group(chat_id, "‚òÄÔ∏è –£—Ç—Ä–æ! –ü—Ä–æ—à–ª–∞ —Å–ø–æ–∫–æ–π–Ω–∞—è –Ω–æ—á—å –±–µ–∑ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏–π!")

    await day_phase(chat_id)


async def day_phase(chat_id):
    alive_players = db.getData(1, ('ID', 'Nickname'),
                               f"!inGame = {chat_id} AND Alive = 1",
                               All=True)
    markup = InlineKeyboardMarkup()
    voites = {

    }
    nicknames = {

    }
    for player_id, nickname in alive_players:
        voites[player_id] = 0
        nicknames[player_id] = nickname
        markup.add(InlineKeyboardButton(
            f"üë§ {nickname}",
            callback_data=f"vote_{player_id}"
        ))

    db.writeData(3, 'voites', json.dumps(voites), f"!ChatID = {chat_id}")
    db.writeData(
        1, 'Voit', 0, f'!ID IN ({", ".join(map(str, voites.keys()))})')
    await send_to_group(chat_id, "üó≥Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –¥–Ω–µ–≤–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ! –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è:", reply_markup=markup)

    await asyncio.sleep(PHASE_TIMEOUTS['day'])
    voites = json.loads(db.getData(3, 'voites', f"!ChatID = {chat_id}"))
    sorted_votes = sorted(
        voites.items(), key=lambda item: item[1], reverse=True)
    if len(sorted_votes) > 1 and sorted_votes[0][1] == sorted_votes[1][1]:
        excluded = None
    else:
        excluded = sorted_votes[0][0]

    stat = ''

    for id in list(voites.keys()):
        stat = f'{stat}\n{nicknames[int(id)]} - {voites[str(id)]}'

    if excluded:
        db.writeData(1, 'Alive', (0), f"!ID = {excluded}")
        await send_to_group(chat_id, f"‚öñÔ∏è –ò–≥—Ä–æ–∫ {db.getData(1, 'Nickname', excluded)} –∏—Å–∫–ª—é—á–µ–Ω!\n –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤: {stat}")
    else:
        await send_to_group(chat_id, f"üîÑ –ù–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –≥–æ–ª–æ—Å–æ–≤\n –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤: {stat}")

    await check_win_condition(chat_id)


async def check_win_condition(chat_id):
    mafia = db.getData(1, 'ID',
                       f"!inGame = {chat_id} AND Alive = 1 AND role = 2",
                       All=True)
    civilians = db.getData(1, 'ID',
                           f"!inGame = {chat_id} AND Alive = 1 AND role != 2",
                           All=True)

    if not mafia:
        await send_to_group(chat_id, "üéâ –ú–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ –ø–æ–±–µ–¥–∏–ª–∏!")
        await end_game(chat_id)
    elif len(mafia) >= len(civilians):
        await send_to_group(chat_id, "üéâ –ú–∞—Ñ–∏—è –ø–æ–±–µ–¥–∏–ª–∞!")
        await end_game(chat_id)
    else:
        await night_phase(chat_id)


async def check_game(chat_id):
    return bool(db.getData(3, 'ID', f"!ChatID = {chat_id}", All=True))


async def end_game(chat_id):
    players = db.getData(1, ('Nickname', 'role'),
                         f"!inGame = {chat_id}",
                         All=True)
    stat = '\n'
    for nickname, role in players:
        stat = f'{stat}\n{nickname} - {ROLES[role]["title"]}{ROLES[role]["emoji"]}'
    await send_to_group(chat_id, f"üèÅ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!\n –†–æ–ª–∏ –∏–≥—Ä–∫–æ–≤: {stat}")
    db.writeData(1, ('inGame', 'Alive', 'role', 'Checked'),
                 (-1, 1, -1, 0),
                 f"!inGame = {chat_id}")
    db.DeleteData(3, f"!ChatID = {chat_id}")


@dp.callback_query_handler(lambda c: c.data.startswith('kill_'))
async def process_kill(callback: CallbackQuery):
    victim_id = int(callback.data.split('_')[1])
    chat_id = db.getData(1, 'inGame', callback.from_user.id)

    game_data = await get_game_data(chat_id)
    game_data['actions']['killed'] = victim_id
    await update_game_data(chat_id, game_data['actions'])
    await callback.message.edit_text("‚úÖ –ñ–µ—Ä—Ç–≤–∞ –≤—ã–±—Ä–∞–Ω–∞!")


@dp.callback_query_handler(lambda c: c.data.startswith('vote_'))
async def process_kill(callback: CallbackQuery):
    victim_id = int(callback.data.split('_')[1])
    chat_id = db.getData(1, 'inGame', callback.from_user.id)

    aboutPlayer = db.getData(1, ('Voit', 'Alive'), callback.from_user.id)

    if aboutPlayer[0] == 0:
        if int(aboutPlayer[1]) == 1:
            votes = json.loads(db.getData(3, 'voites', f"!ChatID = {chat_id}"))
            votes[str(victim_id)] += 1
            await callback.answer('–¢–≤–æ–π –≥–æ–ª–æ—Å –ø—Ä–∏–Ω—è—Ç ‚úÖ')
            db.writeData(3, 'voites', json.dumps(
                votes), f'!ChatID = {chat_id}')
            db.writeData(1, 'voit', 1, callback.from_user.id)
        else:
            await callback.answer('–ú–µ—Ä—Ç–≤—ã–µ - –Ω–µ –≥–æ–ª–æ—Å—É—é—Ç ‚ùå')
    else:
        await callback.answer('–¢—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª ‚ùå')


@dp.callback_query_handler(lambda c: c.data.startswith('heal_'))
async def process_heal(callback: CallbackQuery):
    patient_id = int(callback.data.split('_')[1])
    chat_id = db.getData(1, 'inGame', callback.from_user.id)

    game_data = await get_game_data(chat_id)
    game_data['actions']['healed'] = patient_id
    await update_game_data(chat_id, game_data['actions'])
    await callback.message.edit_text("‚úÖ –ü–∞—Ü–∏–µ–Ω—Ç –≤—ã–±—Ä–∞–Ω!")


@dp.callback_query_handler(lambda c: c.data.startswith('check_'))
async def process_check(callback: CallbackQuery):
    checked_id = int(callback.data.split('_')[1])
    role = db.getData(1, 'role', checked_id)
    role_name = ROLES[role]['title']
    db.writeData(1, 'Checked', (1), f"!ID = {checked_id}")
    await callback.message.edit_text(f"–†–æ–ª—å –∏–≥—Ä–æ–∫–∞: {role_name}")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
